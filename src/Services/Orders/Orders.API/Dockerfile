# ðŸ”¨ Stage 1 - Build da aplicaÃ§Ã£o
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
WORKDIR /app

# Copiando arquivos .csproj para restaurar dependÃªncias
COPY *.sln .
COPY building-blocks/EcommerceModular.Application/*.csproj ./building-blocks/EcommerceModular.Application/
COPY building-blocks/EcommerceModular.Domain/*.csproj ./building-blocks/EcommerceModular.Domain/
COPY building-blocks/EcommerceModular.Infrastructure/*.csproj ./building-blocks/EcommerceModular.Infrastructure/
COPY src/services/Orders/Orders.API/*.csproj ./src/services/Orders/Orders.API/
COPY src/services/Orders/Orders.KafkaConsumer/*.csproj ./src/services/Orders/Orders.KafkaConsumer/
COPY src/services/Orders/Orders.Consumer/*.csproj ./src/services/Orders/Orders.Consumer/
COPY tests/Orders.Application.Tests/*.csproj ./tests/Orders.Application.Tests/

# Restaurando pacotes NuGet
RUN dotnet restore

# Copiando todo o restante do cÃ³digo
COPY . .

EXPOSE 5100

# Setando o diretÃ³rio de trabalho para Orders.API
WORKDIR /app/src/services/Orders/Orders.API

# Publicando a aplicaÃ§Ã£o em modo Release
RUN dotnet publish -c Release -o out

# ðŸš€ Stage 2 - Imagem final de runtime
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS runtime
WORKDIR /app

# Copiando arquivos publicados do stage anterior
COPY --from=build /app/src/services/Orders/Orders.API/out ./

# Definindo o ponto de entrada da aplicaÃ§Ã£o
ENTRYPOINT ["dotnet", "Orders.API.dll"]